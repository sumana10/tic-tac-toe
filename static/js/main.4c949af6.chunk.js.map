{"version":3,"sources":["components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","draw","setDraw","reloadGame","changeItem","itemNumber","toast","type","trim","length","isDraw","console","log","includes","Container","position","Row","Col","md","Button","color","size","onClick","block","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c949af6.chunk.js","sourcesContent":["import React from 'react'\r\nimport {FaTimes, FaPen, FaRegCircle} from \"react-icons/fa\"\r\n\r\nconst Icon = ({name}) =>{\r\n  switch (name){\r\n    case 'circle': \r\n     return <FaRegCircle className=\"icons\"/>\r\n    case 'cross':\r\n      return <FaTimes className=\"icons\"/>\r\n    default:\r\n      return <FaPen className=\"icons\"/>\r\n\r\n  }\r\n}\r\nexport default Icon","import React, { useState } from \"react\";\n\n//import component\nimport Icon from \"./components/Icon\";\n\n//import toastify library\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n//import reactstrap library \nimport { Card, CardBody, Container, Button, Col, Row } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n//own style sheet\nimport \"./App.css\";\n\nconst itemArray = new Array(9).fill(\"empty\");\n\nconst App = () => {\n\n  const [isCross, setIsCross] = useState(false);\n  const [winMessage, setWinMessage] = useState('');\n  const [draw, setDraw] = useState('');\n\n //reset everything \n  const reloadGame = () => {\n    setIsCross(false);\n    setWinMessage('');\n     setDraw('');\n    itemArray.fill(\"empty\", 0, 9);\n    \n  };\n\n  const checkIsWinner = () => {\n    if(\n      itemArray[0] === itemArray[1] && \n      itemArray[0] === itemArray[2] && \n      itemArray[0] !== \"empty\"\n      ){\n      setWinMessage(`${itemArray[0]} won`)\n    }else if(\n      itemArray[3] !== \"empty\" &&\n      itemArray[3] === itemArray[4] &&\n      itemArray[4] === itemArray[5]\n    ){\n      setWinMessage(`${itemArray[3]} won`);\n    }else if (\n      itemArray[6] !== \"empty\" &&\n      itemArray[6] === itemArray[7] &&\n      itemArray[7] === itemArray[8]\n    ) {\n      setWinMessage(`${itemArray[6]} won`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[3] &&\n      itemArray[3] === itemArray[6]\n    ) {\n      setWinMessage(`${itemArray[0]} won`);\n    } else if (\n      itemArray[1] !== \"empty\" &&\n      itemArray[1] === itemArray[4] &&\n      itemArray[4] === itemArray[7]\n    ) {\n      setWinMessage(`${itemArray[1]} won`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[5] &&\n      itemArray[5] === itemArray[8]\n    ) {\n      setWinMessage(`${itemArray[2]} won`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[4] &&\n      itemArray[4] === itemArray[8]\n    ) {\n      setWinMessage(`${itemArray[0]} won`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[4] &&\n      itemArray[4] === itemArray[6]\n    ) {\n      setWinMessage(`${itemArray[2]} won`);\n    }\n  };\n  \n //change icon (set state and array)\n  const changeItem = itemNumber => {\n\n    if(winMessage){\n\n      return toast(winMessage, {type:\"success\"})\n\n    }\n    if(draw){\n      return toast(draw, {type:\"warning\"})\n    }\n    if(itemArray[itemNumber] === \"empty\"){\n\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\"\n      setIsCross(!isCross)\n\n    }else{\n\n      return toast(\"already filled\", {type: \"error\"})\n\n    }\n    checkIsWinner();\n    if(typeof winMessage === 'string' && winMessage.trim().length === 0)\n     isDraw();\n    \n  };\n  const isDraw = () =>{\n    \n    console.log(winMessage);\n\n    if(typeof winMessage === 'string' && winMessage.trim().length === 0){//if winmessage false //blank is false //data is true\n   \n    console.log(winMessage);\n    \n    if(!itemArray.includes(\"empty\")){//initially true\n      \n      setDraw(\"it's a draw\");\n    }\n\n  }\n\n  }\n\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\" />\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n        {winMessage ? (\n          <div className=\"mb-2 mt-2\">\n              <h1 className=\"text-white text-uppercase text-center\">\n                {winMessage}{draw}\n              </h1>\n           <div className=\"d-grid gap-2\">\n                <Button\n                  color=\"light\"\n                  size=\"lg\"  onClick={reloadGame}\n                  block>\n                Reload the game\n                </Button>\n           </div>\n          </div>\n        ) : ( draw ? (\n\n          <div className=\"mb-2 mt-2\">\n              <h1 className=\"text-white text-uppercase text-center\">\n                {draw}\n              </h1>\n           <div className=\"d-grid gap-2\">\n                <Button\n                  color=\"light\"\n                  size=\"lg\"  onClick={reloadGame}\n                  block>\n                Reload the game\n                </Button>\n           </div>\n          </div>\n\n        ):(\n          <h1 className=\"text-center text-white\">\n            {isCross ? \"Cross\": \"Circle\"} turns\n          </h1>\n        ))}\n          <div className=\"grid\">\n            {itemArray.map((item, index) => (\n              <Card key={index} color=\"info\" onClick={() => changeItem(index)}>\n                <CardBody className=\"box\">\n                  <Icon name={item} />\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}